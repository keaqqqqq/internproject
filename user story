Title: Banking Dashboard Page Development with React
 
As a bank user,
I want to access a banking dashboard page with login and signup features and a user-friendly interface,
So that I can manage my banking activities effectively.
 
Acceptance Criteria:
Given I am on any page of the banking application,
When I navigate to the header,
Then I should see "Login" and "Sign Up" buttons clearly visible.
 
Given I am on the login page,
When I enter valid login credentials (e.g., username: testuser@example.com, password: password123),
Then I should be redirected to the banking dashboard page.
 
Given I am on the login page,
When I enter invalid login credentials,
Then I should see an error message indicating "Invalid username or password".
 
Given I am on the login page,
When I click on the "Forgot Password" link,
Then I should be redirected to the "Forgot Password" page to reset my password.
 
Given I am on the sign-up page,
When I fill in all required registration details (e.g., Name: John Doe, Email: newuser@example.com, Password: password123),
Then I should be successfully registered and redirected to the login page.
 
Given I am on the sign-up page,
When I enter invalid or missing registration details (e.g., missing email, weak password),
Then I should see appropriate error messages like "Please enter a valid email" and "Password must be at least 8 characters".
 
Given I am logged in and on the dashboard page,
Then I should see a visually appealing and user-friendly layout.
 
Given I am logged in and on the dashboard page,
Then I should see a section displaying "Account Summary" with dummy data for at least three account types (e.g., Checking: $5,000, Savings: $10,000, Credit Card: $500).
 
Given I am logged in and on the dashboard page,
Then I should see a section displaying "Recent Transactions" with at least five dummy transaction records including date, description, and amount.
 
Given the React project structure,
Then it should include 'src' folder with subfolders like 'components', 'pages', 'services', and 'assets'.
 
Given the application UI,
Then it should have a clean and modern design with consistent fonts and colors.
 
Given the application UI,
Then it should be responsive and work well on both desktop and mobile screen sizes.
